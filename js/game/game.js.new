/**
 * game.js - M√©canique de jeu Block Breaker
 * Responsable: Personne 1 - M√©canique du jeu
 * Version am√©lior√©e par Jonas
 */

// √âl√©ments du DOM
const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");
const scoreDisplay = document.getElementById("scoreBoard");
const messageDisplay = document.getElementById("message");
const restartBtn = document.getElementById("restartBtn");

// Variables du jeu
let paddleHeight = 12, paddleWidth = 75, paddleX;
let ballRadius = 8;
let x, y, dx, dy;
let rightPressed = false, leftPressed = false;
let score = 0, lives = 3, level = 1, gameRunning = true;
let isGameOver = false;

// Configuration des couleurs et niveaux
const colors = ["#FF6F61", "#FFB400", "#00C896", "#4285F4"];
const levels = [
  { rows: 3, cols: 5 },
  { rows: 4, cols: 6 },
  { rows: 5, cols: 7 }
];

// Variables pour les effets sp√©ciaux
let bricks = [];
let trail = [];

/**
 * Configuration du niveau actuel
 */
function setupLevel() {
  const { rows, cols } = levels[level - 1];
  bricks = [];
  
  for (let r = 0; r < rows; r++) {
    bricks[r] = [];
    for (let c = 0; c < cols; c++) {
      bricks[r][c] = { x: 0, y: 0, status: 1 };
    }
  }
}

/**
 * R√©initialisation de la balle et de la raquette
 */
function resetBallAndPaddle() {
  paddleX = (canvas.width - paddleWidth) / 2;
  x = canvas.width / 2;
  y = canvas.height - 30;
  dx = 3;
  dy = -3;
  trail = [];
}

/**
 * Dessin de la tra√Æn√©e de la balle (effet visuel)
 */
function drawTrail() {
  for (let i = 0; i < trail.length; i++) {
    const t = trail[i];
    ctx.beginPath();
    ctx.arc(t.x, t.y, ballRadius * (1 - i / trail.length), 0, Math.PI * 2);
    ctx.fillStyle = `rgba(0, 247, 255, ${0.5 * (1 - i / trail.length)})`;
    ctx.fill();
    ctx.closePath();
  }
}

/**
 * Dessin de la balle
 */
function drawBall() {
  ctx.beginPath();
  ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
  ctx.fillStyle = "#00f7ff";
  ctx.fill();
  ctx.closePath();
  
  // Mise √† jour de la tra√Æn√©e
  trail.unshift({ x, y });
  if (trail.length > 15) trail.pop();
}

/**
 * Dessin de la raquette
 */
function drawPaddle() {
  ctx.beginPath();
  ctx.roundRect(paddleX, canvas.height - paddleHeight, paddleWidth, paddleHeight, [10]);
  ctx.fillStyle = "#ffffff";
  ctx.fill();
  ctx.closePath();
}

/**
 * Dessin des briques
 */
function drawBricks() {
  const { rows, cols } = levels[level - 1];
  const brickWidth = (canvas.width - (cols + 1) * 10) / cols;
  const brickHeight = 20;

  for (let r = 0; r < rows; r++) {
    for (let c = 0; c < cols; c++) {
      const b = bricks[r][c];
      if (b.status === 1) {
        const brickX = c * (brickWidth + 10) + 10;
        const brickY = r * (brickHeight + 10) + 30;
        b.x = brickX;
        b.y = brickY;
        ctx.beginPath();
        ctx.roundRect(brickX, brickY, brickWidth, brickHeight, 10);
        ctx.fillStyle = colors[r % colors.length];
        ctx.fill();
        ctx.lineWidth = 2;
        ctx.strokeStyle = "#fff";
        ctx.stroke();
        ctx.closePath();
      }
    }
  }
}

/**
 * D√©tection des collisions avec les briques
 */
function collisionDetection() {
  const { cols } = levels[level - 1];
  const brickWidth = (canvas.width - (cols + 1) * 10) / cols;

  for (let r = 0; r < bricks.length; r++) {
    for (let c = 0; c < bricks[r].length; c++) {
      const b = bricks[r][c];
      if (b.status === 1) {
        if (x > b.x && x < b.x + brickWidth && y > b.y && y < b.y + 20) {
          dy = -dy;
          b.status = 0;
          score++;
          updateUI();

          // V√©rifier si toutes les briques sont cass√©es
          if (bricks.flat().every(b => b.status === 0)) {
            if (level < levels.length) {
              level++;
              setupLevel();
              resetBallAndPaddle();
              updateUI();
            } else {
              endGame("üéâ Tu as termin√© tous les niveaux !");
            }
          }
        }
      }
    }
  }
}

/**
 * Mise √† jour de l'interface utilisateur
 */
function updateUI() {
  scoreDisplay.textContent = `Score: ${score}`;
  
  // Mise √† jour des informations de niveau et de vies si les √©l√©ments existent
  const livesElement = document.getElementById("lives");
  const levelElement = document.getElementById("level");
  
  if (livesElement) livesElement.textContent = `Vies: ${lives}`;
  if (levelElement) levelElement.textContent = `Niveau: ${level}`;
}

/**
 * Fin de partie
 */
function endGame(msg) {
  isGameOver = true;
  gameRunning = false;
  messageDisplay.textContent = msg;
  restartBtn.style.display = "inline-block";
  
  // Ajouter le score √† l'utilisateur connect√© dans Firebase
  if (typeof addScoreToUser === "function" && typeof isUserLoggedIn === "function" && isUserLoggedIn()) {
    // Envoyer le score √† Firebase
    addScoreToUser(score)
      .then(() => {
        console.log("Score sauvegard√© avec succ√®s");
      })
      .catch(error => {
        console.error("Erreur lors de la sauvegarde du score:", error);
      });
  }
}

/**
 * Boucle principale du jeu
 */
function draw() {
  if (!gameRunning) return;

  ctx.clearRect(0, 0, canvas.width, canvas.height);
  drawBricks();
  drawTrail();
  drawBall();
  drawPaddle();
  collisionDetection();

  // Rebonds sur les murs lat√©raux
  if (x + dx > canvas.width - ballRadius || x + dx < ballRadius) dx = -dx;
  
  // Rebond au plafond
  if (y + dy < ballRadius) dy = -dy;
  // Rebond sur la raquette ou perte de vie
  else if (y + dy > canvas.height - ballRadius) {
    if (x > paddleX && x < paddleX + paddleWidth) {
      // Rebond dynamique selon l'endroit o√π la balle touche la raquette
      const hitPoint = x - (paddleX + paddleWidth / 2);
      dx = hitPoint * 0.15; // Plus le contact est loin du centre, plus le rebond est inclin√©
      dy = -Math.abs(dy);
    } else {
      // Perte de vie
      lives--;
      updateUI();
      if (lives === 0) {
        endGame("üí• Game Over !");
      } else {
        resetBallAndPaddle();
      }
    }
  }

  // D√©placement de la raquette
  if (rightPressed && paddleX < canvas.width - paddleWidth) paddleX += 5;
  else if (leftPressed && paddleX > 0) paddleX -= 5;

  // Mise √† jour de la position de la balle
  x += dx;
  y += dy;

  requestAnimationFrame(draw);
}

// Ajout de la m√©thode roundRect pour les coins arrondis
if (!CanvasRenderingContext2D.prototype.roundRect) {
  CanvasRenderingContext2D.prototype.roundRect = function(x, y, width, height, radius) {
    if (width < 2 * radius) radius = width / 2;
    if (height < 2 * radius) radius = height / 2;
    this.beginPath();
    this.moveTo(x + radius, y);
    this.arcTo(x + width, y, x + width, y + height, radius);
    this.arcTo(x + width, y + height, x, y + height, radius);
    this.arcTo(x, y + height, x, y, radius);
    this.arcTo(x, y, x + width, y, radius);
    this.closePath();
    return this;
  };
}

// √âcouteurs d'√©v√©nements pour les contr√¥les
document.addEventListener("keydown", (e) => {
  if (e.key === "Right" || e.key === "ArrowRight") rightPressed = true;
  if (e.key === "Left" || e.key === "ArrowLeft") leftPressed = true;
});

document.addEventListener("keyup", (e) => {
  if (e.key === "Right" || e.key === "ArrowRight") rightPressed = false;
  if (e.key === "Left" || e.key === "ArrowLeft") leftPressed = false;
});

// Gestionnaire d'√©v√©nement pour le bouton de red√©marrage
restartBtn.addEventListener("click", () => {
  score = 0;
  lives = 3;
  level = 1;
  gameRunning = true;
  isGameOver = false;
  messageDisplay.textContent = "";
  restartBtn.style.display = "none";
  setupLevel();
  resetBallAndPaddle();
  updateUI();
  draw();
});

// Fonction de d√©marrage du jeu
function startGame() {
  if (!gameRunning) {
    score = 0;
    lives = 3;
    level = 1;
    gameRunning = true;
    isGameOver = false;
    messageDisplay.textContent = "";
    restartBtn.style.display = "none";
    setupLevel();
    resetBallAndPaddle();
    updateUI();
    draw();
  }
}

// Le jeu ne d√©marre plus automatiquement au chargement
// mais seulement apr√®s connexion via la fonction updateUI() dans user.js

// Exporter les fonctions pour pouvoir les utiliser dans d'autres fichiers
window.startGame = startGame;
window.getScore = () => score;
